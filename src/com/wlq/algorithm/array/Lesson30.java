package com.wlq.algorithm.array;

import java.util.HashSet;
import java.util.Set;

/**
 * 有效的数独
 * https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/30/
 * <p>
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * <p>
 * <p>
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * <p>
 * 示例 1:
 * <p>
 * 输入:
 * [
 * ['5','3','.','.','7','.','.','.','.'},
 * ['6','.','.','1','9','5','.','.','.'},
 * ['.','9','8','.','.','.','.','6','.'},
 * ['8','.','.','.','6','.','.','.','3'},
 * ['4','.','.','8','.','3','.','.','1'},
 * ['7','.','.','.','2','.','.','.','6'},
 * ['.','6','.','.','.','.','2','8','.'},
 * ['.','.','.','4','1','9','.','.','5'},
 * ['.','.','.','.','8','.','.','7','9']
 * ]
 * 输出: true
 * 示例 2:
 * <p>
 * 输入:
 * [
 * ['8','3','.','.','7','.','.','.','.'},
 * ['6','.','.','1','9','5','.','.','.'},
 * ['.','9','8','.','.','.','.','6','.'},
 * ['8','.','.','.','6','.','.','.','3'},
 * ['4','.','.','8','.','3','.','.','1'},
 * ['7','.','.','.','2','.','.','.','6'},
 * ['.','6','.','.','.','.','2','8','.'},
 * ['.','.','.','4','1','9','.','.','5'},
 * ['.','.','.','.','8','.','.','7','9']
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 * <p>
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * @author 17050408
 * @since 2018/5/17 19:28
 */
public class Lesson30 {

    public static void main(String[] args) {
        Lesson30 lesson30 = new Lesson30();
        char[][] borad1 = new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        System.out.println(lesson30.isValidSudoku(borad1));
        char[][] borad2 = new char[][]{
                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        System.out.println(lesson30.isValidSudoku(borad2));
    }

    public boolean isValidSudoku(char[][] board) {

        for (int i = 0; i < 9; i++) {
            Set<Character> rowSet = new HashSet<>();
            Set<Character> columnSet = new HashSet<>();
            Set<Character> cubeSet = new HashSet<>();
            for (int j = 0; j < 9; j++) {
                char rowValue = board[i][j];
                // 行检查
                if (rowValue != '.' && !rowSet.add(rowValue)) {
                    return false;
                }
                // 列检查
                char columnValue = board[j][i];
                if (columnValue != '.' && !columnSet.add(columnValue)) {
                    return false;
                }
                // 3*3块检查
                // 行号+偏移量
                // 1 0   3 * 0 + 0 = 0  3 * 0 + 0 = 0
                // 1 1   3 * 0 + 0 = 0  3 * 0 + 1 = 1
                // 1 2   3 * 0 + 0 = 0  3 * 0 + 2 = 2
                // 1 3   3 * 0 + 1 = 1  3 * 0 + 0 = 0
                // 1 4   3 * 0 + 1 = 1  3 * 0 + 1 = 1
                // 1 5   3 * 0 + 1 = 1  3 * 0 + 2 = 2
                // 1 6
                // 1 7
                // 1 8
                // 1 9
                int rowOffSet = 3 * (i / 3) + j / 3;
                // 列号+偏移量
                int colOffSet = 3 * (i % 3) + j % 3;
                if (board[rowOffSet][colOffSet] !='.' && !cubeSet.add(board[rowOffSet][colOffSet])) {
                    return false;
                }
            }
        }
        return true;
    }
}
